	Class and Objects

	Functions:
	---------
		fun functionName(){
		//stmts;
		}

		functionName()


		Function with parameters
		Returning values from a function
		
		Lambda Function:
		----------------
				Function with no name.
				Defined with {} which takes variables as parameter and body of a function.
				Syntax:
				-------
					{variable -> function_body}

		AIC: Annonymous Inner Class

		Kotlin Collections:
		===================
		Overview:	
		---------
				A collection contains a number of objects of the same type.
				Objects in a collection are called elements or items.

				Example:
					All Employees in a company forms a collection.

				Collection Types:
				==================

				1) Immutable collection (or collection)
								Methods of immutable collection that supports read functionlities :


						List  listOf():
								List is an ordered collection with acess to elements by indices (integer numbers that reflect position).
								Elements can occur more than once in a list.

						Set    setOf():
								Set is a collection of unique elements . It reflects the mathematical abstraction 
								of set.(group of objects without repetations)

						Map    mapOf():(or dictionary)
								set of key-value pairs.Keys are unique and each of them maps to exactly one value.


				2) Mutable Collection:
						Mutable collections supports both read and write functionalities.
						
						List  ArrayList<T>()
						      arrayListOf()
						      mutuableListOf()


						Map   HashMap
						      hasMaoOf()
						      MutableMapOf()


						Set  hasSetOf()
						     mutableSetOf()


		======================================================================================================================
		    CONNECTOR <- MySQL Connector JDBC or ODBC (add jars into project)
		MySQL + Kotlin 
		---------------

			mysql:
			------

			host:localhost
			port:3306
			username: root
			password: admin

			Database: sampledb
			Table:     users
			             id      name
				      1      Alex
				      2      John
				      3      Jimmy


			db.kt
			-----

			main(){
			//code to connect to db
			//fetch all records from users table in sampledb			
			//results to print
			}
		
			outPut:
			=======
				1,John
				2,Jimmy
				3,Julie

		download mysql connector jar:
		-----------------------------
		Adding .jar file to kotlin Project
		File -> Project STructure -> Modules -> Dependencies -> 
			Add (+) -> Jars or Directories -> (browse to .jar file)
			-> click Apply -> OK


		Insert
		Select
		Update

	==============================================================================
	Users:
	------ 
              PK,AI
		id  name   age     email        phone         city    state  country   pincode
		1   John    23  john@gmail.com  0987654321  Bangalore  KA     India     56004


		CRUD:
		----
			users-crud.kt 
		Create DataBase : demodb
		Create Table:     users
		manually perform sql queries in commandline
	
		insert
                select
		update
		delete
		==================================================
		create new Project in IntelliJ with name : MyDemoDBApp
		Add .jar file into the project
		compile and execute the users-crud.kt or users-crud.kts

	--------------------------------------------------------------------------

	9:30 AM to 11:15 AM <- Lab(practicals)
       	15 mins Break1
	11:30 AM TO 1:30 PM <- SESSION
	30 mins Lunch
	2:00 PM TO 3:45 PM <-  LAB(practicals)
	3:30 to 3:45 PM    <- Break2
	3:45 PM TO 5:45 PM <-  SESSION
	--------------------------------------------------------------------------
		
	Software Engineering:
	=====================
				well defined scientific principles,techniques and procedures.

	20 partcipants => 20 Modules
	----------------------------

	organised instructions


	High Quality
	Cost Effective
	Reliable
	Secured
	Dynamic(upgrades etc)

	SDLC:
	-----
		Sotware Development Life Cycle
		
		1. Requirements Gathering : (CRS SRS FRS BRS )
		2. Analysis or Feasibilty Study
		3. Design : ( HLD , LLD) ---> FDD TDD
		4. Coding  <- sonarcube
		5. Testing
		6. Implementation    ===> CI/CD
		7. Maintainence.


			Users Module
			Session Management
			Logs
			Role Management
			Reporting

		sonarcube: High Quality code

		SonarCube is an open-source Software Quality Platform.
		It saves the calculated measures in a database and showcases
		 them in a rich web based dashboard.
		It provides trends and leading indicators.




		D1 D2 D3 D4 ...... Dn



		NoSQL: 
			non tabular databases and store data differently than relational 
       			tables.

		 	Document  -JSON Objects.
			key-value

			Flexible Schemas
			Fast queries due to the data model
			Ease of Use
			
			id   email           password
			1   john@gmail.com     123456


			{
			id:"ghhfghf56r564654676",
			email:"John@gmal.com",
			password:"123456"
			}
			{} <- JSON Object
			[] <- JSON Array

			Table               Collection
			  rows & cols               document


			MongoDB commands:
			-----------------

			1. show dbs; list all databases
			2. use sampledb; to select db 
			3. db; lists selected db name or current db;
			4. show collections;
			5. db.createCollection("users");
		create  6. db.users.insertOne({email:'john@gmail.com',password:'123456'});
		read	7. db.users.find();
		update  8. db.users.update({ _id: ObjectId("63048850b0e1574323aadc70")},
				{$set:{passowrd:'88888'}});
		delete  9. db.users.remove({_id: ObjectId("6304887bb0e1574323aadc71")})
		
			10.db.users.update({email:'john@gmail.com'},{$set:{age:23}})

			11.db.users.find({age:{$eq:23}})  [Query Operator]

			12.db.users.find({age:{$gt:23}})
		
			13.db.users.find({age:{$gte:23}})
			==========================================================
			Topic:
			------
				Objective
				Syntax
				Example

			MongoDB: CRUD <- Users
					 Products or Movies or Tickets or Module..n
			Aggreagtion  <- Employee
					

			Assignments + Case Study (MongoDB)
			Assessments <- weekly


			=========================================================

			MongoDB:
			=======
			Steps to import moviesList.json in mongoDB:

			1) Login into mongosh
 			2) create a new db : movie
			3) configure mongoimport by navigating to 
				https://www.mongodb.com/try/download/database-tools?tck=docs_databasetools
			4) set up the environment path variable
				(C:\Program Files\MongoDB\Tools\100\bin)
			5) Open a new command prompt and execute the following command:
			    mongoimport --jsonArray --db movie --collection movies --file moviesList.json
			6) Upon success :
			     88 document(s) imported successfully. 0 document(s) failed to import.

			

db.movies.aggregate([{ "$group": { _id: { country: "$country", actors: "$actors" }, count: { $sum: 1 } } }])

			
db.movies.find({$and:[{title:{$eq:'Vertigo'}},{year:{$eq:1958}}]})

db.movies.aggregate([{$group:{_id:'$country',actors:{$sum:1},title:{$sum:1}}}])


		MONGODB DOESNOT SUPPORT PRIMARY KEY OR FOREIGN KEY RELATIONSHIPS.
		-------------------------------------------------------------------

		
		Passenger:
		Train:
		
		Ticket:
		-------
		    Passenger
		    Train

==========================================================================================

	Aggregation:  
	------------
		MongoDB Aggregation is a pipeline that process the 
		data on each pipeline stage.

	Input ---->  $match  --> $group  ---> $sort   ---> output


		pipeline = [
			{$match:{...}},
			{$group:{...}},
			{$sort: {...}}
		]
		db.collectionName.aggregate(pipeline,options)


		mongoimport --jsonArray --db mydb --collection test --file my-data.json

		db.test.aggregate([{$match:{state:"MA"}}])
		db.test.aggregate([{ $match: { state: "MA" } },{$count:"Number of records"}])
		db.test.aggregate([{ $match: { state: "MA" }},{$group:{_id:"$city"} }])
		db.test.aggregate([{ $match: { state: "MA" }},{$group:{_id:"$city"} }]).sort({_id:-1})	
		db.test.aggregate([{ $match: { state: "MA" }},{$sort:{pop:-1}},{$limit:3}])
		db.test.aggregate([{ $match: { state: "MA" }},{$group:{_id:"$city"} },{$sort:{pop:1}}])

		db.ticket.update({'ticket_no':1},{$unset:{'train.destination':'Delhi'}})


		MongoDB + Kotlin:
		=================
		Jar File: https://mvnrepository.com/artifact/org.mongodb/mongo-java-driver/

			Step1: Connectivity to MOngoDB
			Step2: Read Documents
			Step3: Insert Documents
			Step4: Update Documents
			Step5: Delete Documents


	Design Patterns:
	----------------
		solution or best practises to software design problem found in real world 
                appication development

			Elements of Reusable Object Oriented Software:
			
			1) Creational Patterns:
				create a objects while hiding the creation logic,rather than
			   instantiating objects directly using new operator.

				Factory method:
				---------------
				interface in Java:
				------------------
				public interface Task{
				  void scan();
				}

				concrete class:
				---------------
				public Class Test1 implements Task{				 
				public void scan(){
				  System.out.Prinltn("Scanning....Test1");
				}
				}
				
				public Class Test2 implements Task{				 
				public void scan(){
				  System.out.Prinltn("Scanning....Test2");
				}
				}

				public Class Test3 implements Task{				 
				public void scan(){
				  System.out.Prinltn("Scanning....Test3");
				}
				}
				//to get object of type task
				public class TaskFactory{
					public Task getTask(String taskType){
					if(taskType == null){
						return null;
					}

					if(taskType.equalsIgnoreCase("Test1")){
					 return new Test1();
					}

					else if(taskType.equalsIgnoreCase("Test2")){
					 return new Test2();
					}

					else if(taskType.equalsIgnoreCase("Test3")){
					 return new Test3();
					}
					return null;
				}


				


			2) Structural Patterns:
				design patterns concern class and object composition.
				Inheritance is used to compose interfaces and define ways to
				compose objects to obtain new functionalities.

			3) Behavioral Patterns:

				concerned with communication between objects. 




			









		
			
			



				

					
		



		